{
  "version": 3,
  "sources": ["../../chartjs-chart-treemap/dist/chartjs-chart-treemap.esm.js"],
  "sourcesContent": ["/*!\n * chartjs-chart-treemap v3.1.0\n * https://chartjs-chart-treemap.pages.dev/\n * (c) 2024 Jukka Kurkela\n * Released under the MIT license\n */\nimport { Element, DatasetController, Chart, registry } from 'chart.js';\nimport { isObject, addRoundedRectPath, defined, toFont, isArray, isNumber, toTRBL, toTRBLCorners, valueOrDefault, clipArea, unclipArea } from 'chart.js/helpers';\n\nconst isOlderPart = (act, req) => req > act || (act.length > req.length && act.slice(0, req.length) === req);\n\nconst getGroupKey = (lvl) => '' + lvl;\n\nfunction scanTreeObject(keys, treeLeafKey, obj, tree = [], lvl = 0, result = []) {\n  const objIndex = lvl - 1;\n  if (keys[0] in obj && lvl > 0) {\n    const record = tree.reduce(function(reduced, item, i) {\n      if (i !== objIndex) {\n        reduced[getGroupKey(i)] = item;\n      }\n      return reduced;\n    }, {});\n    record[treeLeafKey] = tree[objIndex];\n    keys.forEach(function(k) {\n      record[k] = obj[k];\n    });\n    result.push(record);\n  } else {\n    for (const childKey of Object.keys(obj)) {\n      const child = obj[childKey];\n      if (isObject(child)) {\n        tree.push(childKey);\n        scanTreeObject(keys, treeLeafKey, child, tree, lvl + 1, result);\n      }\n    }\n  }\n  tree.splice(objIndex, 1);\n  return result;\n}\n\nfunction normalizeTreeToArray(keys, treeLeafKey, obj) {\n  const data = scanTreeObject(keys, treeLeafKey, obj);\n  if (!data.length) {\n    return data;\n  }\n  const max = data.reduce(function(maxVal, element) {\n    // minus 2 because _leaf and value properties are added\n    // on top to groups ones\n    const ikeys = Object.keys(element).length - 2;\n    return maxVal > ikeys ? maxVal : ikeys;\n  });\n  data.forEach(function(element) {\n    for (let i = 0; i < max; i++) {\n      const groupKey = getGroupKey(i);\n      if (!element[groupKey]) {\n        element[groupKey] = '';\n      }\n    }\n  });\n  return data;\n}\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/flat\nfunction flatten(input) {\n  const stack = [...input];\n  const res = [];\n  while (stack.length) {\n    // pop value from stack\n    const next = stack.pop();\n    if (Array.isArray(next)) {\n      // push back array items, won't modify the original input\n      stack.push(...next);\n    } else {\n      res.push(next);\n    }\n  }\n  // reverse to restore input order\n  return res.reverse();\n}\n\nfunction getPath(groups, value, defaultValue) {\n  if (!groups.length) {\n    return;\n  }\n  const path = [];\n  for (const grp of groups) {\n    const item = value[grp];\n    if (item === '') {\n      path.push(defaultValue);\n      break;\n    }\n    path.push(item);\n  }\n  return path.length ? path.join('.') : defaultValue;\n}\n\n/**\n * @param {[]} values\n * @param {string} grp\n * @param {[string]} keys\n * @param {string} treeeLeafKey\n * @param {string} [mainGrp]\n * @param {*} [mainValue]\n * @param {[]} groups\n */\nfunction group(values, grp, keys, treeLeafKey, mainGrp, mainValue, groups = []) {\n  const key = keys[0];\n  const addKeys = keys.slice(1);\n  const tmp = Object.create(null);\n  const data = Object.create(null);\n  const ret = [];\n  let g, i, n;\n  for (i = 0, n = values.length; i < n; ++i) {\n    const v = values[i];\n    if (mainGrp && v[mainGrp] !== mainValue) {\n      continue;\n    }\n    g = v[grp] || v[treeLeafKey] || '';\n    if (!(g in tmp)) {\n      const tmpRef = tmp[g] = {value: 0};\n      addKeys.forEach(function(k) {\n        tmpRef[k] = 0;\n      });\n      data[g] = [];\n    }\n    tmp[g].value += +v[key];\n    tmp[g].label = v[grp] || '';\n    const tmpRef = tmp[g];\n    addKeys.forEach(function(k) {\n      tmpRef[k] += v[k];\n    });\n    tmp[g].path = getPath(groups, v, g);\n    data[g].push(v);\n  }\n\n  Object.keys(tmp).forEach((k) => {\n    const v = {children: data[k]};\n    v[key] = +tmp[k].value;\n    addKeys.forEach(function(ak) {\n      v[ak] = +tmp[k][ak];\n    });\n    v[grp] = tmp[k].label;\n    v.label = k;\n    v.path = tmp[k].path;\n\n    if (mainGrp) {\n      v[mainGrp] = mainValue;\n    }\n    ret.push(v);\n  });\n\n  return ret;\n}\n\nfunction index(values, key) {\n  let n = values.length;\n  let i;\n\n  if (!n) {\n    return key;\n  }\n\n  const obj = isObject(values[0]);\n  key = obj ? key : 'v';\n\n  for (i = 0, n = values.length; i < n; ++i) {\n    if (obj) {\n      values[i]._idx = i;\n    } else {\n      values[i] = {v: values[i], _idx: i};\n    }\n  }\n  return key;\n}\n\nfunction sort(values, key) {\n  if (key) {\n    values.sort((a, b) => +b[key] - +a[key]);\n  } else {\n    values.sort((a, b) => +b - +a);\n  }\n}\n\nfunction sum(values, key) {\n  let s, i, n;\n\n  for (s = 0, i = 0, n = values.length; i < n; ++i) {\n    s += key ? +values[i][key] : +values[i];\n  }\n\n  return s;\n}\n\n/**\n * @param {string} pkg\n * @param {string} min\n * @param {string} ver\n * @param {boolean} [strict=true]\n * @returns {boolean}\n */\nfunction requireVersion(pkg, min, ver, strict = true) {\n  const parts = ver.split('.');\n  let i = 0;\n  for (const req of min.split('.')) {\n    const act = parts[i++];\n    if (parseInt(req, 10) < parseInt(act, 10)) {\n      break;\n    }\n    if (isOlderPart(act, req)) {\n      if (strict) {\n        throw new Error(`${pkg} v${ver} is not supported. v${min} or newer is required.`);\n      } else {\n        return false;\n      }\n    }\n  }\n  return true;\n}\n\nconst widthCache = new Map();\n\n/**\n * Helper function to get the bounds of the rect\n * @param {TreemapElement} rect the rect\n * @param {boolean} [useFinalPosition]\n * @return {object} bounds of the rect\n * @private\n */\nfunction getBounds(rect, useFinalPosition) {\n  const {x, y, width, height} = rect.getProps(['x', 'y', 'width', 'height'], useFinalPosition);\n  return {left: x, top: y, right: x + width, bottom: y + height};\n}\n\nfunction limit(value, min, max) {\n  return Math.max(Math.min(value, max), min);\n}\n\nfunction parseBorderWidth(value, maxW, maxH) {\n  const o = toTRBL(value);\n\n  return {\n    t: limit(o.top, 0, maxH),\n    r: limit(o.right, 0, maxW),\n    b: limit(o.bottom, 0, maxH),\n    l: limit(o.left, 0, maxW)\n  };\n}\n\nfunction parseBorderRadius(value, maxW, maxH) {\n  const o = toTRBLCorners(value);\n  const maxR = Math.min(maxW, maxH);\n\n  return {\n    topLeft: limit(o.topLeft, 0, maxR),\n    topRight: limit(o.topRight, 0, maxR),\n    bottomLeft: limit(o.bottomLeft, 0, maxR),\n    bottomRight: limit(o.bottomRight, 0, maxR)\n  };\n}\n\nfunction boundingRects(rect) {\n  const bounds = getBounds(rect);\n  const width = bounds.right - bounds.left;\n  const height = bounds.bottom - bounds.top;\n  const border = parseBorderWidth(rect.options.borderWidth, width / 2, height / 2);\n  const radius = parseBorderRadius(rect.options.borderRadius, width / 2, height / 2);\n  const outer = {\n    x: bounds.left,\n    y: bounds.top,\n    w: width,\n    h: height,\n    active: rect.active,\n    radius\n  };\n\n  return {\n    outer,\n    inner: {\n      x: outer.x + border.l,\n      y: outer.y + border.t,\n      w: outer.w - border.l - border.r,\n      h: outer.h - border.t - border.b,\n      active: rect.active,\n      radius: {\n        topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n        topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n        bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n        bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r)),\n      }\n    }\n  };\n}\n\nfunction inRange(rect, x, y, useFinalPosition) {\n  const skipX = x === null;\n  const skipY = y === null;\n  const bounds = !rect || (skipX && skipY) ? false : getBounds(rect, useFinalPosition);\n\n  return bounds\n\t\t&& (skipX || x >= bounds.left && x <= bounds.right)\n\t\t&& (skipY || y >= bounds.top && y <= bounds.bottom);\n}\n\nfunction hasRadius(radius) {\n  return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n\n/**\n * Add a path of a rectangle to the current sub-path\n * @param {CanvasRenderingContext2D} ctx Context\n * @param {*} rect Bounding rect\n */\nfunction addNormalRectPath(ctx, rect) {\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\n\nfunction shouldDrawCaption(rect, options) {\n  if (!options || options.display === false) {\n    return false;\n  }\n  const {w, h} = rect;\n  const font = toFont(options.font);\n  const min = font.lineHeight;\n  const padding = limit(valueOrDefault(options.padding, 3) * 2, 0, Math.min(w, h));\n  return (w - padding) > min && (h - padding) > min;\n}\n\nfunction drawText(ctx, rect, options, item, levels) {\n  const {captions, labels} = options;\n  ctx.save();\n  ctx.beginPath();\n  ctx.rect(rect.x, rect.y, rect.w, rect.h);\n  ctx.clip();\n  const isLeaf = item && (!defined(item.l) || item.l === levels);\n  if (isLeaf && labels.display) {\n    drawLabel(ctx, rect, options);\n  } else if (!isLeaf && shouldDrawCaption(rect, captions)) {\n    drawCaption(ctx, rect, options, item);\n  }\n  ctx.restore();\n}\n\nfunction drawCaption(ctx, rect, options, item) {\n  const {captions, spacing, rtl} = options;\n  const {color, hoverColor, font, hoverFont, padding, align, formatter} = captions;\n  const oColor = (rect.active ? hoverColor : color) || color;\n  const oAlign = align || (rtl ? 'right' : 'left');\n  const optFont = (rect.active ? hoverFont : font) || font;\n  const oFont = toFont(optFont);\n  const lh = oFont.lineHeight / 2;\n  const x = calculateX(rect, oAlign, padding);\n  ctx.fillStyle = oColor;\n  ctx.font = oFont.string;\n  ctx.textAlign = oAlign;\n  ctx.textBaseline = 'middle';\n  ctx.fillText(formatter || item.g, x, rect.y + padding + spacing + lh);\n}\n\nfunction measureLabelSize(ctx, lines, fonts) {\n  const fontsKey = fonts.reduce(function(prev, item) {\n    prev += item.string;\n    return prev;\n  }, '');\n  const mapKey = lines.join() + fontsKey + (ctx._measureText ? '-spriting' : '');\n  if (!widthCache.has(mapKey)) {\n    ctx.save();\n    const count = lines.length;\n    let width = 0;\n    let height = 0;\n    for (let i = 0; i < count; i++) {\n      const font = fonts[Math.min(i, fonts.length - 1)];\n      ctx.font = font.string;\n      const text = lines[i];\n      width = Math.max(width, ctx.measureText(text).width);\n      height += font.lineHeight;\n    }\n    ctx.restore();\n    widthCache.set(mapKey, {width, height});\n  }\n  return widthCache.get(mapKey);\n}\n\nfunction toFonts(fonts, fitRatio) {\n  return fonts.map(function(f) {\n    f.size = Math.floor(f.size * fitRatio);\n    f.lineHeight = undefined;\n    return toFont(f);\n  });\n}\n\nfunction labelToDraw(ctx, rect, options, labelSize) {\n  const {overflow, padding} = options;\n  const {width, height} = labelSize;\n  if (overflow === 'hidden') {\n    return !((width + padding * 2) > rect.w || (height + padding * 2) > rect.h);\n  } else if (overflow === 'fit') {\n    const ratio = Math.min(rect.w / (width + padding * 2), rect.h / (height + padding * 2));\n    if (ratio < 1) {\n      return ratio;\n    }\n  }\n  return true;\n}\n\nfunction getFontFromOptions(rect, labels) {\n  const {font, hoverFont} = labels;\n  const optFont = (rect.active ? hoverFont : font) || font;\n  return isArray(optFont) ? optFont.map(f => toFont(f)) : [toFont(optFont)];\n}\n\nfunction drawLabel(ctx, rect, options) {\n  const labels = options.labels;\n  const content = labels.formatter;\n  if (!content) {\n    return;\n  }\n  const contents = isArray(content) ? content : [content];\n  let fonts = getFontFromOptions(rect, labels);\n  let labelSize = measureLabelSize(ctx, contents, fonts);\n  const lblToDraw = labelToDraw(ctx, rect, labels, labelSize);\n  if (!lblToDraw) {\n    return;\n  }\n  if (isNumber(lblToDraw)) {\n    labelSize = {width: labelSize.width * lblToDraw, height: labelSize.height * lblToDraw};\n    fonts = toFonts(fonts, lblToDraw);\n  }\n  const {color, hoverColor, align} = labels;\n  const optColor = (rect.active ? hoverColor : color) || color;\n  const colors = isArray(optColor) ? optColor : [optColor];\n  const xyPoint = calculateXYLabel(rect, labels, labelSize);\n  ctx.textAlign = align;\n  ctx.textBaseline = 'middle';\n  let lhs = 0;\n  contents.forEach(function(l, i) {\n    const c = colors[Math.min(i, colors.length - 1)];\n    const f = fonts[Math.min(i, fonts.length - 1)];\n    const lh = f.lineHeight;\n    ctx.font = f.string;\n    ctx.fillStyle = c;\n    ctx.fillText(l, xyPoint.x, xyPoint.y + lh / 2 + lhs);\n    lhs += lh;\n  });\n}\n\nfunction drawDivider(ctx, rect, options, item) {\n  const dividers = options.dividers;\n  if (!dividers.display || !item._data.children.length) {\n    return;\n  }\n  const {x, y, w, h} = rect;\n  const {lineColor, lineCapStyle, lineDash, lineDashOffset, lineWidth} = dividers;\n  ctx.save();\n  ctx.strokeStyle = lineColor;\n  ctx.lineCap = lineCapStyle;\n  ctx.setLineDash(lineDash);\n  ctx.lineDashOffset = lineDashOffset;\n  ctx.lineWidth = lineWidth;\n  ctx.beginPath();\n  if (w > h) {\n    const w2 = w / 2;\n    ctx.moveTo(x + w2, y);\n    ctx.lineTo(x + w2, y + h);\n  } else {\n    const h2 = h / 2;\n    ctx.moveTo(x, y + h2);\n    ctx.lineTo(x + w, y + h2);\n  }\n  ctx.stroke();\n  ctx.restore();\n}\n\nfunction calculateXYLabel(rect, options, labelSize) {\n  const {align, position, padding} = options;\n  let x, y;\n  x = calculateX(rect, align, padding);\n  if (position === 'top') {\n    y = rect.y + padding;\n  } else if (position === 'bottom') {\n    y = rect.y + rect.h - padding - labelSize.height;\n  } else {\n    y = rect.y + (rect.h - labelSize.height) / 2 + padding;\n  }\n  return {x, y};\n}\n\nfunction calculateX(rect, align, padding) {\n  if (align === 'left') {\n    return rect.x + padding;\n  } else if (align === 'right') {\n    return rect.x + rect.w - padding;\n  }\n  return rect.x + rect.w / 2;\n}\n\nclass TreemapElement extends Element {\n\n  constructor(cfg) {\n    super();\n\n    this.options = undefined;\n    this.width = undefined;\n    this.height = undefined;\n\n    if (cfg) {\n      Object.assign(this, cfg);\n    }\n  }\n\n  draw(ctx, data, levels = 0) {\n    if (!data) {\n      return;\n    }\n    const options = this.options;\n    const {inner, outer} = boundingRects(this);\n\n    const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n\n    ctx.save();\n\n    if (outer.w !== inner.w || outer.h !== inner.h) {\n      ctx.beginPath();\n      addRectPath(ctx, outer);\n      ctx.clip();\n      addRectPath(ctx, inner);\n      ctx.fillStyle = options.borderColor;\n      ctx.fill('evenodd');\n    }\n\n    ctx.beginPath();\n    addRectPath(ctx, inner);\n    ctx.fillStyle = options.backgroundColor;\n    ctx.fill();\n\n    drawDivider(ctx, inner, options, data);\n    drawText(ctx, inner, options, data, levels);\n    ctx.restore();\n  }\n\n  inRange(mouseX, mouseY, useFinalPosition) {\n    return inRange(this, mouseX, mouseY, useFinalPosition);\n  }\n\n  inXRange(mouseX, useFinalPosition) {\n    return inRange(this, mouseX, null, useFinalPosition);\n  }\n\n  inYRange(mouseY, useFinalPosition) {\n    return inRange(this, null, mouseY, useFinalPosition);\n  }\n\n  getCenterPoint(useFinalPosition) {\n    const {x, y, width, height} = this.getProps(['x', 'y', 'width', 'height'], useFinalPosition);\n    return {\n      x: x + width / 2,\n      y: y + height / 2\n    };\n  }\n\n  tooltipPosition() {\n    return this.getCenterPoint();\n  }\n\n  /**\n   * @todo: remove this unused function in v3\n   */\n  getRange(axis) {\n    return axis === 'x' ? this.width / 2 : this.height / 2;\n  }\n}\n\nTreemapElement.id = 'treemap';\n\nTreemapElement.defaults = {\n  borderRadius: 0,\n  borderWidth: 0,\n  captions: {\n    align: undefined,\n    color: 'black',\n    display: true,\n    font: {},\n    formatter: (ctx) => ctx.raw.g || ctx.raw._data.label || '',\n    padding: 3\n  },\n  dividers: {\n    display: false,\n    lineCapStyle: 'butt',\n    lineColor: 'black',\n    lineDash: [],\n    lineDashOffset: 0,\n    lineWidth: 1,\n  },\n  label: undefined,\n  labels: {\n    align: 'center',\n    color: 'black',\n    display: false,\n    font: {},\n    formatter(ctx) {\n      if (ctx.raw.g) {\n        return [ctx.raw.g, ctx.raw.v + ''];\n      }\n      return ctx.raw._data.label ? [ctx.raw._data.label, ctx.raw.v + ''] : ctx.raw.v + '';\n    },\n    overflow: 'cut',\n    position: 'middle',\n    padding: 3\n  },\n  rtl: false,\n  spacing: 0.5,\n  unsorted: false,\n};\n\nTreemapElement.descriptors = {\n  captions: {\n    _fallback: true\n  },\n  labels: {\n    _fallback: true\n  },\n  _scriptable: true,\n  _indexable: false\n};\n\nTreemapElement.defaultRoutes = {\n  backgroundColor: 'backgroundColor',\n  borderColor: 'borderColor'\n};\n\nfunction getDims(itm, w2, s2, key) {\n  const a = itm._normalized;\n  const ar = w2 * a / s2;\n  const d1 = Math.sqrt(a * ar);\n  const d2 = a / d1;\n  const w = key === '_ix' ? d1 : d2;\n  const h = key === '_ix' ? d2 : d1;\n\n  return {d1, d2, w, h};\n}\n\nconst getX = (rect, w) => rect.rtl ? rect.x + rect.iw - w : rect.x + rect._ix;\n\nfunction buildRow(rect, itm, dims, sum) {\n  const r = {\n    x: getX(rect, dims.w),\n    y: rect.y + rect._iy,\n    w: dims.w,\n    h: dims.h,\n    a: itm._normalized,\n    v: itm.value,\n    vs: itm.values,\n    s: sum,\n    _data: itm._data\n  };\n  if (itm.group) {\n    r.g = itm.group;\n    r.l = itm.level;\n    r.gs = itm.groupSum;\n  }\n  return r;\n}\n\nclass Rect {\n  constructor(r) {\n    r = r || {w: 1, h: 1};\n    this.rtl = !!r.rtl;\n    this.unsorted = !!r.unsorted;\n    this.x = r.x || r.left || 0;\n    this.y = r.y || r.top || 0;\n    this._ix = 0;\n    this._iy = 0;\n    this.w = r.w || r.width || (r.right - r.left);\n    this.h = r.h || r.height || (r.bottom - r.top);\n  }\n\n  get area() {\n    return this.w * this.h;\n  }\n\n  get iw() {\n    return this.w - this._ix;\n  }\n\n  get ih() {\n    return this.h - this._iy;\n  }\n\n  get dir() {\n    const ih = this.ih;\n    return ih <= this.iw && ih > 0 ? 'y' : 'x';\n  }\n\n  get side() {\n    return this.dir === 'x' ? this.iw : this.ih;\n  }\n\n  map(arr) {\n    const {dir, side} = this;\n    const key = dir === 'x' ? '_ix' : '_iy';\n    const sum = arr.nsum;\n    const row = arr.get();\n    const w2 = side * side;\n    const s2 = sum * sum;\n    const ret = [];\n    let maxd2 = 0;\n    let totd1 = 0;\n    for (const itm of row) {\n      const dims = getDims(itm, w2, s2, key);\n      totd1 += dims.d1;\n      maxd2 = Math.max(maxd2, dims.d2);\n      ret.push(buildRow(this, itm, dims, arr.sum));\n      this[key] += dims.d1;\n    }\n\n    this[dir === 'x' ? '_iy' : '_ix'] += maxd2;\n    this[key] -= totd1;\n    return ret;\n  }\n}\n\nconst min = Math.min;\nconst max = Math.max;\n\nfunction getStat(sa) {\n  return {\n    min: sa.min,\n    max: sa.max,\n    sum: sa.sum,\n    nmin: sa.nmin,\n    nmax: sa.nmax,\n    nsum: sa.nsum\n  };\n}\n\nfunction getNewStat(sa, o) {\n  const v = +o[sa.key];\n  const n = v * sa.ratio;\n  o._normalized = n;\n\n  return {\n    min: min(sa.min, v),\n    max: max(sa.max, v),\n    sum: sa.sum + v,\n    nmin: min(sa.nmin, n),\n    nmax: max(sa.nmax, n),\n    nsum: sa.nsum + n\n  };\n}\n\nfunction setStat(sa, stat) {\n  Object.assign(sa, stat);\n}\n\nfunction push(sa, o, stat) {\n  sa._arr.push(o);\n  setStat(sa, stat);\n}\n\nclass StatArray {\n  constructor(key, ratio) {\n    const me = this;\n    me.key = key;\n    me.ratio = ratio;\n    me.reset();\n  }\n\n  get length() {\n    return this._arr.length;\n  }\n\n  reset() {\n    const me = this;\n    me._arr = [];\n    me._hist = [];\n    me.sum = 0;\n    me.nsum = 0;\n    me.min = Infinity;\n    me.max = -Infinity;\n    me.nmin = Infinity;\n    me.nmax = -Infinity;\n  }\n\n  push(o) {\n    push(this, o, getNewStat(this, o));\n  }\n\n  pushIf(o, fn, ...args) {\n    const nstat = getNewStat(this, o);\n    if (!fn(getStat(this), nstat, args)) {\n      return o;\n    }\n    push(this, o, nstat);\n  }\n\n  get() {\n    return this._arr;\n  }\n}\n\nfunction compareAspectRatio(oldStat, newStat, args) {\n  if (oldStat.sum === 0) {\n    return true;\n  }\n\n  const [length] = args;\n  const os2 = oldStat.nsum * oldStat.nsum;\n  const ns2 = newStat.nsum * newStat.nsum;\n  const l2 = length * length;\n  const or = Math.max(l2 * oldStat.nmax / os2, os2 / (l2 * oldStat.nmin));\n  const nr = Math.max(l2 * newStat.nmax / ns2, ns2 / (l2 * newStat.nmin));\n  return nr <= or;\n}\n\n/**\n *\n * @param {number[]|object[]} values\n * @param {object} rectangle\n * @param {string} [key]\n * @param {string} [grp]\n * @param {number} [lvl]\n * @param {number} [gsum]\n */\nfunction squarify(values, rectangle, keys = [], grp, lvl, gsum) {\n  values = values || [];\n  const rows = [];\n  const rect = new Rect(rectangle);\n  const row = new StatArray('value', rect.area / sum(values, keys[0]));\n  let length = rect.side;\n  const n = values.length;\n  let i, o;\n\n  if (!n) {\n    return rows;\n  }\n\n  const tmp = values.slice();\n  let key = index(tmp, keys[0]);\n\n  if (!rectangle?.unsorted) {\n    sort(tmp, key);\n  }\n\n  const val = (idx) => key ? +tmp[idx][key] : +tmp[idx];\n  const gval = (idx) => grp && tmp[idx][grp];\n\n  for (i = 0; i < n; ++i) {\n    o = {value: val(i), groupSum: gsum, _data: values[tmp[i]._idx], level: undefined, group: undefined};\n    if (grp) {\n      o.level = lvl;\n      o.group = gval(i);\n      const tmpRef = tmp[i];\n      o.values = keys.reduce(function(obj, k) {\n        obj[k] = +tmpRef[k];\n        return obj;\n      }, {});\n    }\n    o = row.pushIf(o, compareAspectRatio, length);\n    if (o) {\n      rows.push(rect.map(row));\n      length = rect.side;\n      row.reset();\n      row.push(o);\n    }\n  }\n  if (row.length) {\n    rows.push(rect.map(row));\n  }\n  return flatten(rows);\n}\n\nvar version = \"3.1.0\";\n\nfunction scaleRect(sq, xScale, yScale, sp) {\n  const sp2 = sp * 2;\n  const x = xScale.getPixelForValue(sq.x);\n  const y = yScale.getPixelForValue(sq.y);\n  const w = xScale.getPixelForValue(sq.x + sq.w) - x;\n  const h = yScale.getPixelForValue(sq.y + sq.h) - y;\n  return {\n    x: x + sp,\n    y: y + sp,\n    width: w - sp2,\n    height: h - sp2,\n    hidden: sp2 > w || sp2 > h,\n  };\n}\n\nfunction rectNotEqual(r1, r2) {\n  return !r1 || !r2\n\t\t|| r1.x !== r2.x\n\t\t|| r1.y !== r2.y\n\t\t|| r1.w !== r2.w\n\t\t|| r1.h !== r2.h\n    || r1.rtl !== r2.rtl\n    || r1.unsorted !== r2.unsorted;\n}\n\nfunction arrayNotEqual(a, b) {\n  let i, n;\n\n  if (!a || !b) {\n    return true;\n  }\n\n  if (a === b) {\n    return false;\n  }\n\n  if (a.length !== b.length) {\n    return true;\n  }\n\n  for (i = 0, n = a.length; i < n; ++i) {\n    if (a[i] !== b[i]) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction buildData(tree, dataset, keys, mainRect) {\n  const treeLeafKey = dataset.treeLeafKey || '_leaf';\n  if (isObject(tree)) {\n    tree = normalizeTreeToArray(keys, treeLeafKey, tree);\n  }\n  const groups = dataset.groups || [];\n  const glen = groups.length;\n  const sp = valueOrDefault(dataset.spacing, 0);\n  const captions = dataset.captions || {};\n  const font = toFont(captions.font);\n  const padding = valueOrDefault(captions.padding, 3);\n\n  function recur(treeElements, gidx, rect, parent, gs) {\n    const g = getGroupKey(groups[gidx]);\n    const pg = (gidx > 0) && getGroupKey(groups[gidx - 1]);\n    const gdata = group(treeElements, g, keys, treeLeafKey, pg, parent, groups.filter((item, index) => index <= gidx));\n    const gsq = squarify(gdata, rect, keys, g, gidx, gs);\n    const ret = gsq.slice();\n    if (gidx < glen - 1) {\n      gsq.forEach((sq) => {\n        const bw = parseBorderWidth(dataset.borderWidth, sq.w / 2, sq.h / 2);\n        const subRect = {\n          ...rect,\n          x: sq.x + sp + bw.l,\n          y: sq.y + sp + bw.t,\n          w: sq.w - 2 * sp - bw.l - bw.r,\n          h: sq.h - 2 * sp - bw.t - bw.b,\n        };\n        if (shouldDrawCaption(subRect, captions)) {\n          subRect.y += font.lineHeight + padding * 2;\n          subRect.h -= font.lineHeight + padding * 2;\n        }\n        gdata.forEach((gEl) => {\n          ret.push(...recur(gEl.children, gidx + 1, subRect, sq.g, sq.s));\n        });\n      });\n    }\n    return ret;\n  }\n\n  return glen\n    ? recur(tree, 0, mainRect)\n    : squarify(tree, mainRect, keys);\n}\n\nclass TreemapController extends DatasetController {\n  constructor(chart, datasetIndex) {\n    super(chart, datasetIndex);\n\n    this._groups = undefined;\n    this._keys = undefined;\n    this._rect = undefined;\n    this._rectChanged = true;\n  }\n\n  initialize() {\n    this.enableOptionSharing = true;\n    super.initialize();\n  }\n\n  getMinMax(scale) {\n    return {\n      min: 0,\n      max: scale.axis === 'x' ? scale.right - scale.left : scale.bottom - scale.top\n    };\n  }\n\n  configure() {\n    super.configure();\n    const {xScale, yScale} = this.getMeta();\n    if (!xScale || !yScale) {\n      // configure is called once before `linkScales`, and at that call we don't have any scales linked yet\n      return;\n    }\n\n    const w = xScale.right - xScale.left;\n    const h = yScale.bottom - yScale.top;\n    const rect = {x: 0, y: 0, w, h, rtl: !!this.options.rtl, unsorted: !!this.options.unsorted};\n\n    if (rectNotEqual(this._rect, rect)) {\n      this._rect = rect;\n      this._rectChanged = true;\n    }\n\n    if (this._rectChanged) {\n      xScale.max = w;\n      xScale.configure();\n      yScale.max = h;\n      yScale.configure();\n    }\n  }\n\n  update(mode) {\n    const dataset = this.getDataset();\n    const {data} = this.getMeta();\n    const groups = dataset.groups || [];\n    const keys = [dataset.key || ''].concat(dataset.sumKeys || []);\n    const tree = dataset.tree = dataset.tree || dataset.data || [];\n\n    if (mode === 'reset') {\n      // reset is called before 2nd configure and is only called if animations are enabled. So wen need an extra configure call here.\n      this.configure();\n    }\n\n    if (this._rectChanged || arrayNotEqual(this._keys, keys) || arrayNotEqual(this._groups, groups) || this._prevTree !== tree) {\n      this._groups = groups.slice();\n      this._keys = keys.slice();\n      this._prevTree = tree;\n      this._rectChanged = false;\n\n      dataset.data = buildData(tree, dataset, this._keys, this._rect);\n      // @ts-ignore using private stuff\n      this._dataCheck();\n      // @ts-ignore using private stuff\n      this._resyncElements();\n    }\n\n    this.updateElements(data, 0, data.length, mode);\n  }\n\n  updateElements(rects, start, count, mode) {\n    const reset = mode === 'reset';\n    const dataset = this.getDataset();\n    const firstOpts = this._rect.options = this.resolveDataElementOptions(start, mode);\n    const sharedOptions = this.getSharedOptions(firstOpts);\n    const includeOptions = this.includeOptions(mode, sharedOptions);\n    const {xScale, yScale} = this.getMeta(this.index);\n\n    for (let i = start; i < start + count; i++) {\n      const options = sharedOptions || this.resolveDataElementOptions(i, mode);\n      const properties = scaleRect(dataset.data[i], xScale, yScale, options.spacing);\n      if (reset) {\n        properties.width = 0;\n        properties.height = 0;\n      }\n\n      if (includeOptions) {\n        properties.options = options;\n      }\n      this.updateElement(rects[i], i, properties, mode);\n    }\n\n    this.updateSharedOptions(sharedOptions, mode, firstOpts);\n  }\n\n  draw() {\n    const {ctx, chartArea} = this.chart;\n    const metadata = this.getMeta().data || [];\n    const dataset = this.getDataset();\n    const levels = (dataset.groups || []).length - 1;\n    const data = dataset.data;\n\n    clipArea(ctx, chartArea);\n    for (let i = 0, ilen = metadata.length; i < ilen; ++i) {\n      const rect = metadata[i];\n      if (!rect.hidden) {\n        rect.draw(ctx, data[i], levels);\n      }\n    }\n    unclipArea(ctx);\n  }\n}\n\nTreemapController.id = 'treemap';\n\nTreemapController.version = version;\n\nTreemapController.defaults = {\n  dataElementType: 'treemap',\n\n  animations: {\n    numbers: {\n      type: 'number',\n      properties: ['x', 'y', 'width', 'height']\n    },\n  },\n\n};\n\nTreemapController.descriptors = {\n  _scriptable: true,\n  _indexable: false\n};\n\nTreemapController.overrides = {\n  interaction: {\n    mode: 'point',\n    includeInvisible: true,\n    intersect: true\n  },\n\n  hover: {},\n\n  plugins: {\n    tooltip: {\n      position: 'treemap',\n      intersect: true,\n      callbacks: {\n        title(items) {\n          if (items.length) {\n            const item = items[0];\n            return item.dataset.key || '';\n          }\n          return '';\n        },\n        label(item) {\n          const dataset = item.dataset;\n          const dataItem = dataset.data[item.dataIndex];\n          const label = dataItem.g || dataItem._data.label || dataset.label;\n          return (label ? label + ': ' : '') + dataItem.v;\n        }\n      }\n    },\n  },\n  scales: {\n    x: {\n      type: 'linear',\n      alignToPixels: true,\n      bounds: 'data',\n      display: false\n    },\n    y: {\n      type: 'linear',\n      alignToPixels: true,\n      bounds: 'data',\n      display: false,\n      reverse: true\n    }\n  },\n};\n\nTreemapController.beforeRegister = function() {\n  requireVersion('chart.js', '3.8', Chart.version);\n};\n\nTreemapController.afterRegister = function() {\n  const tooltipPlugin = registry.plugins.get('tooltip');\n  if (tooltipPlugin) {\n    tooltipPlugin.positioners.treemap = function(active) {\n      if (!active.length) {\n        return false;\n      }\n\n      const item = active[active.length - 1];\n      const el = item.element;\n\n      return el.tooltipPosition();\n    };\n  } else {\n    console.warn('Unable to register the treemap positioner because tooltip plugin is not registered');\n  }\n};\n\nTreemapController.afterUnregister = function() {\n  const tooltipPlugin = registry.plugins.get('tooltip');\n  if (tooltipPlugin) {\n    delete tooltipPlugin.positioners.treemap;\n  }\n};\n\nexport { TreemapController, TreemapElement };\n"],
  "mappings": "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",
  "names": ["max", "tmpRef", "min", "sum", "index"]
}
